<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
/**
 * Copyright 2009 The Apache Software Foundation
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
<configuration>
<!--

    **************************************************
    *  Common Cache configuration parameters (For all caches in the system)
    **************************************************
-->
<property>
        <name>c2.root.dir-path</name>
        <description>Cache root directory - where to save cached data</description>
        <value>.</value>
</property>
<!--

    **************************************************
    *  Row Cache - specific configuration parameters *
    **************************************************
-->
<property>
	<name>hbase.coprocessor.user.region.classes</name>
        <description>Coprocessor's main class</description>
        <value>com.carrot.hbase.cache.RowCacheCoprocessor</value>
</property>
<property>
	<name>rowcache.type</name>
        <description>Row cache type: OFFHEAP, FILE, HYBRID. Default - OFFHEAP </description>
	<value>OFFHEAP</value>
</property>
<property>
	<name>rowcache.persistent</name>
	<description>Is row cache persistent? Deafult: true</decsription>
	<value>true</value>
</property>	
<property>
	<name>rowcache.jmx.metrics.enabled</name>
	<description>Are JMX metrics enabled? Deafult: true</decsription>
	<value>true</value>
</property>
<property>
	<name>rowcache.jmx.metrics.domain.name</name>
	<description>Metrics domain name</decsription>
	<value>HBase-ScanCache</value>
</property>
	
<property>
        <name>rowcache.io.buffer.size</name>
        <description>I/O buffer size (in bytes)</description>
        <value>1048576</value>
</property>
	
<!--

    **************************************************
    *  Offheap Row Cache - specific configuration parameters *
    **************************************************
-->
<property>
        <name>rowcache-offheap.c2.storage.max-size</name>
        <description>Maximum memory allocated to off-heap row cache (in bytes). Default: 0</description>
        <value>10000000000</value>
</property>
	
<property>
        <name>rowcache-offheap.c2.data.segment-size</name>
        <description>Data segment size of off-heap row cache (in bytes). Default: 4MB</description>
        <value>4931584</value>
</property>
<property>
        <name>rowcache-offheap.c2.eviction-policy-impl</name>
        <description>Eviction policy implementation class name for offheap row cache. Default: SLRUEvictionPolicy. Available options:
		com.carrot.cache.eviction.LRUEvictionPolicy and com.carrot.cache.eviction.FIFOEvictionPolicy
	</description>
        <value>com.carrot.cache.eviction.SLRUEvictionPolicy</value>
</property>
<property>
        <name>rowcache-offheap.c2.recycling-selector-impl</name>
        <description>Recycling selector implementation class name for offheap row cache. Default: LRCRecyclingSelector (Least-Recently-Created).
		Available options:
		com.carrot.cache.controllers.LRCRecyclingSelector, com.carrot.cache.controllers.MinAliveRecyclingSelector
	</description>
        <value>com.carrot.cache.controllers.LRCRecyclingSelector</value>
</property>
<!--

    **************************************************
    *  File Row Cache - specific configuration parameters *
    **************************************************
-->
<property>
        <name>rowcache-file.c2.storage.max-size</name>
        <description>Maximum memory allocated to file-based row cache (in bytes). Default: 0</description>
        <value>10000000000</value>
</property>
	
<property>
        <name>rowcache-file.c2.data.segment-size</name>
        <description>Data segment size of file row cache (in bytes). Default: 64MB</description>
        <value>268,435,456</value>
</property>
<property>
        <name>rowcache-file.c2.eviction-policy-impl</name>
        <description>Eviction policy implementation class name for file row cache. Default: SLRUEvictionPolicy. Available options:
		com.carrot.cache.eviction.LRUEvictionPolicy and com.carrot.cache.eviction.FIFOEvictionPolicy
	</description>
        <value>com.carrot.cache.eviction.SLRUEvictionPolicy</value>
</property>
<property>
        <name>rowcache-file.c2.recycling-selector-impl</name>
        <description>Recycling selector implementation class name for file-based row cache. Default: LRCRecyclingSelector (Least-Recently-Created).
		Available options:
		com.carrot.cache.controllers.LRCRecyclingSelector, com.carrot.cache.controllers.MinAliveRecyclingSelector
	</description>
        <value>com.carrot.cache.controllers.LRCRecyclingSelector</value>
</property>
	
<!--

    **************************************************
    *  Sidecar FS - specific configuration parameters  
    **************************************************
-->	
<property>
        <name>sidecar.write.cache.size</name>
        <description> Sidecar write buffer (cache) size in bytes. Default: 0
	</description>
        <value>10000000000</value>
</property>
<property>
        <name>sidecar.write.cache.uri</name>
        <description> Sidecar write buffer (cache) location. Example: file:///some-path-to-write-cache
	</description>
        <value></value>
</property>
<property>
        <name>sidecar.write.cache.mode</name>
        <description> Sidecar write cache mode: DISABLED, SYNC, ASYNC_CLOSE, ASYNC_COPY. Default: SYNC 
	</description>
        <value>SYNC</value>
</property>	
<property>
        <name>sidecar.data.page.size</name>
        <description> Sidecar data page size (in bytes). Default: 1MB
	</description>
        <value>1048576</value>
</property>	
<property>
        <name>sidecar.io.buffer.size</name>
        <description> Sidecar I/O buffer size (in bytes). This is data prefetch buffer. Default: 4MB
	</description>
        <value></value>
</property>	
<property>
        <name>sidecar.io.pool.size</name>
        <description> This is object pool size to keep prefetch buffers (refer to the above option) to avoid constant byte buffer allocations.
		Default: 32
	</description>
        <value>32</value>
</property>	
<property>
        <name>sidecar.jmx.metrics.enabled</name>
        <description> Sidecar JMX metrics enabled. Default: true
	</description>
        <value>true</value>
</property>	
<property>
        <name>sidecar.jmx.metrics.domain.name</name>
        <description> Sidecar JMX metrics domain name. Default: SidecarFS
	</description>
        <value>SidecarFS</value>
</property>	
<property>
        <name>sidecar.data.cache.type</name>
        <description> Sidecar JMX data cache type.  Available options: OFFHEAP, FILE, HYBRID. Default: FILE
	</description>
        <value>FILE</value>
</property>
<property>
        <name>sidecar.cache.persistent</name>
        <description> Are SidecarFS data and meta caches persistent. Default: true. Content of caches will be saved to a
		disk upon server's shutdown.
	</description>
        <value>true</value>
</property>
<property>
        <name>sidecar.caching.hint.detector.impl</name>
        <description> Sidecar Caching Hint Detector implementation class name. Default: null
	</description>
        <value></value>
</property>	
<property>
        <name>sidecar.thread.pool.max.size</name>
        <description> This thread pool is used to sync write cache and remote FS as well as 
   		to clean cache upon file deletion or rename. Default: 8
	</description>
        <value>8</value>
</property>
<property>
        <name>sidecar.read.exclude.path.list</name>
        <description> Comma-separated list of regular expressions of directory names in the
   remote file system, which must be excluded from caching on read. By default, SidecarFS caches ALL reads
   (except when caching hint detector if provided forbids caching). Deafult: null
	</description>
        <value></value>
</property>
<property>
        <name>sidecar.write.include.path.list</name>
        <description> Comma-separated list of regular expressions of directory names in the
   remote file system, which must be included to caching on write. By default, SidecarFS doesn not cache in write. Deafult: null
	</description>
        <value></value>
</property>		
<property>
        <name>sidecar.write.cache.mode</name>
        <description> Write cache mode. Available options: DISABLED, SYNC (default), ASYNC_CLOSE (remote file is closed asynchronously),
		ASYNC_COPY (file from write cache is being copied to the remote FS asynchronously.
	</description>
        <value>SYNC</value>
</property>	
<property>
        <name>sidecar.remote.files.mutable</name>
        <description> Are remote files mutable? In general? Mutability means, file content 
   		can be changed after creation (appended or fully rewritten). Default: true
	</description>
        <value>true</value>
</property>
<property>
        <name>sidecar.data.cache.mode</name>
        <description> How to cache data on read: ALL (caches all reads), MINSIZE (caches data from files which size is over minimum
		threshold), NOT_IN_WRITE_CACHE (caches data from files which are not in a write cache). Default: ALL
	</description>
        <value>ALL</value>
</property>
<property>
        <name>sidecar.cache.minsize.threshold</name>
        <description> If cache data mode == MINSIZE - this is the threshold in bytes.
	</description>
        <value>ALL</value>
</property>
<property>
        <name>sidecar.write.cache.exclude.list</name>
        <description> Comma-separated list of directory patterns to exclude from write cache (write buffer). Default: null
	</description>
        <value></value>
</property>

<!--

    **************************************************
    *  Sidecar Offheap Data Page Cache - specific configuration parameters *
    **************************************************
-->
<property>
        <name>sidecar-data-offheap.c2.storage.max-size</name>
        <description>Maximum memory allocated to off-heap sidecar FS data page cache (in bytes). Default: 0</description>
        <value>10000000000</value>
</property>
	
<property>
        <name>sidecar-data-offheap.c2.data.segment-size</name>
        <description>Data segment size of off-heap sidecar FS data page cache (in bytes). Default: 4MB</description>
        <value>4931584</value>
</property>
<property>
        <name>sidecar-data-offheap.c2.eviction-policy-impl</name>
        <description>Eviction policy implementation class name for offheap sidecar FS data page  cache. 
		Default: SLRUEvictionPolicy. Available options:
		com.carrot.cache.eviction.LRUEvictionPolicy and com.carrot.cache.eviction.FIFOEvictionPolicy
	</description>
        <value>com.carrot.cache.eviction.SLRUEvictionPolicy</value>
</property>
<property>
        <name>sidecar-data-offheap.c2.recycling-selector-impl</name>
        <description>Recycling selector implementation class name for offheap sidecar FS data page cache. 
		Default: LRCRecyclingSelector (Least-Recently-Created).
		Available options:
		com.carrot.cache.controllers.LRCRecyclingSelector, com.carrot.cache.controllers.MinAliveRecyclingSelector
	</description>
        <value>com.carrot.cache.controllers.LRCRecyclingSelector</value>
</property>
<!--

    **************************************************
    *  Sidecar FS File Data Page Cache - specific configuration parameters *
    **************************************************
-->
<property>
        <name>sidecar-data-file.c2.storage.max-size</name>
        <description>Maximum memory allocated to file-based sidecar FS data page cache (in bytes). Default: 0</description>
        <value>10000000000</value>
</property>
	
<property>
        <name>sidecar-data-file.c2.data.segment-size</name>
        <description>Data segment size of file sidecar FS data page cache (in bytes). Default: 64MB</description>
        <value>268,435,456</value>
</property>
<property>
        <name>sidecar-data-file.c2.eviction-policy-impl</name>
        <description>Eviction policy implementation class name for file sidecar FS data page cache. 
		Default: SLRUEvictionPolicy. Available options:
		com.carrot.cache.eviction.LRUEvictionPolicy and com.carrot.cache.eviction.FIFOEvictionPolicy
	</description>
        <value>com.carrot.cache.eviction.SLRUEvictionPolicy</value>
</property>
<property>
        <name>sidecar-data-file.c2.recycling-selector-impl</name>
        <description>Recycling selector implementation class name for file-based sidecar FS data page cache. 
		Default: LRCRecyclingSelector (Least-Recently-Created).
		Available options:
		com.carrot.cache.controllers.LRCRecyclingSelector, com.carrot.cache.controllers.MinAliveRecyclingSelector
	</description>
        <value>com.carrot.cache.controllers.LRCRecyclingSelector</value>
</property>
<!--

    **************************************************
    *  Sidecar FS Meta Data Cache - specific configuration parameters 
    * Meta data cache is always offheap.
    **************************************************
-->
<property>
        <name>sidecar-meta-offheap.c2.storage.max-size</name>
        <description>Maximum memory allocated to  sidecar FS meta datacache (in bytes). Default: 0</description>
        <value>10000000000</value>
</property>
	
<property>
        <name>sidecar-meta-offheap.c2.data.segment-size</name>
        <description>Data segment size of sidecar FS meta data cache (in bytes). Default: 4MB</description>
        <value>4000000</value>
</property>
<property>
        <name>sidecar-meta-offheap.c2.eviction-policy-impl</name>
        <description>Eviction policy implementation class name for sidecar FS meta data cache. 
		Default: SLRUEvictionPolicy. Available options:
		com.carrot.cache.eviction.LRUEvictionPolicy and com.carrot.cache.eviction.FIFOEvictionPolicy
	</description>
        <value>com.carrot.cache.eviction.SLRUEvictionPolicy</value>
</property>
<property>
        <name>sidecar-meta-offheap.c2.recycling-selector-impl</name>
        <description>Recycling selector implementation class name for sidecar FS meta data cache. 
		Default: LRCRecyclingSelector (Least-Recently-Created).
		Available options:
		com.carrot.cache.controllers.LRCRecyclingSelector, com.carrot.cache.controllers.MinAliveRecyclingSelector
	</description>
        <value>com.carrot.cache.controllers.LRCRecyclingSelector</value>
</property>
</configuration>
